// <auto-generated />
using System;
using DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbContext.Migrations.SqlServerDbContext
{
    [DbContext(typeof(MainDbContext.SqlServerDbContext))]
    [Migration("20250417152222_miInitial")]
    partial class miInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FriendQuote", b =>
                {
                    b.Property<Guid>("FriendsFriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuotesQuoteId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FriendsFriendId", "QuotesQuoteId");

                    b.HasIndex("QuotesQuoteId");

                    b.ToTable("FriendQuote");
                });

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Models.Friend", b =>
                {
                    b.Property<Guid>("FriendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.HasKey("FriendId");

                    b.HasIndex("AddressId");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Models.Pet", b =>
                {
                    b.Property<Guid>("PetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("AnimalKind")
                        .HasColumnType("int");

                    b.Property<string>("AnimalKindString")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("AnimalMood")
                        .HasColumnType("int");

                    b.Property<string>("AnimalMoodString")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("OwnerFriendId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Seeded")
                        .HasColumnType("bit");

                    b.HasKey("PetId");

                    b.HasIndex("OwnerFriendId");

                    b.ToTable("Pets");
                });

            modelBuilder.Entity("Models.Quote", b =>
                {
                    b.Property<Guid>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("QuoteText")
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("QuoteId");

                    b.ToTable("Quotes");
                });

            modelBuilder.Entity("FriendQuote", b =>
                {
                    b.HasOne("Models.Friend", null)
                        .WithMany()
                        .HasForeignKey("FriendsFriendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Quote", null)
                        .WithMany()
                        .HasForeignKey("QuotesQuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Friend", b =>
                {
                    b.HasOne("Models.Address", "Address")
                        .WithMany("Residents")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Models.Pet", b =>
                {
                    b.HasOne("Models.Friend", "Owner")
                        .WithMany("Pets")
                        .HasForeignKey("OwnerFriendId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Models.Address", b =>
                {
                    b.Navigation("Residents");
                });

            modelBuilder.Entity("Models.Friend", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
